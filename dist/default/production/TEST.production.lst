

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jul 28 03:53:52 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F871
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.05
    21                           ; Generated 20/12/2018 GMT
    22                           ; 
    23                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F871 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0092                     	;# 
    93  0098                     	;# 
    94  0099                     	;# 
    95  009E                     	;# 
    96  009F                     	;# 
    97  010C                     	;# 
    98  010D                     	;# 
    99  010E                     	;# 
   100  010F                     	;# 
   101  018C                     	;# 
   102  018D                     	;# 
   103  0000                     	;# 
   104  0001                     	;# 
   105  0002                     	;# 
   106  0003                     	;# 
   107  0004                     	;# 
   108  0005                     	;# 
   109  0006                     	;# 
   110  0007                     	;# 
   111  0008                     	;# 
   112  0009                     	;# 
   113  000A                     	;# 
   114  000B                     	;# 
   115  000C                     	;# 
   116  000D                     	;# 
   117  000E                     	;# 
   118  000E                     	;# 
   119  000F                     	;# 
   120  0010                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0015                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0017                     	;# 
   127  0018                     	;# 
   128  0019                     	;# 
   129  001A                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  0081                     	;# 
   133  0085                     	;# 
   134  0086                     	;# 
   135  0087                     	;# 
   136  0088                     	;# 
   137  0089                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  0092                     	;# 
   142  0098                     	;# 
   143  0099                     	;# 
   144  009E                     	;# 
   145  009F                     	;# 
   146  010C                     	;# 
   147  010D                     	;# 
   148  010E                     	;# 
   149  010F                     	;# 
   150  018C                     	;# 
   151  018D                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  0092                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009E                     	;# 
   194  009F                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  010F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  0041                     _RD1	set	65
   202  0040                     _RD0	set	64
   203  0045                     _RD5	set	69
   204  0044                     _RD4	set	68
   205  0043                     _RD3	set	67
   206  0042                     _RD2	set	66
   207  0088                     _TRISD	set	136
   208  0089                     _TRISEbits	set	137
   209                           
   210                           	psect	strings
   211  0001                     __pstrings:	
   212  0001                     stringtab:	
   213  0001                     __stringtab:	
   214  0001                     stringcode:	
   215                           ;	String table - string pointers are 1 byte each
   216                           
   217  0001                     stringdir:	
   218  0001  3000               	movlw	high stringdir
   219  0002  008A               	movwf	10
   220  0003  0804               	movf	4,w
   221  0004  0A84               	incf	4,f
   222  0005  0782               	addwf	2,f
   223  0006                     __stringbase:	
   224  0006  3400               	retlw	0
   225  0007                     __end_of__stringtab:	
   226  0007                     STR_5:	
   227  0007  3477               	retlw	119	;'w'
   228  0008  3477               	retlw	119	;'w'
   229  0009  3477               	retlw	119	;'w'
   230  000A  342E               	retlw	46	;'.'
   231  000B  3465               	retlw	101	;'e'
   232  000C  346C               	retlw	108	;'l'
   233  000D  3465               	retlw	101	;'e'
   234  000E  3463               	retlw	99	;'c'
   235  000F  3474               	retlw	116	;'t'
   236  0010  3472               	retlw	114	;'r'
   237  0011  346F               	retlw	111	;'o'
   238  0012  3453               	retlw	83	;'S'
   239  0013  346F               	retlw	111	;'o'
   240  0014  346D               	retlw	109	;'m'
   241  0015  3465               	retlw	101	;'e'
   242  0016  342E               	retlw	46	;'.'
   243  0017  3463               	retlw	99	;'c'
   244  0018  346F               	retlw	111	;'o'
   245  0019  346D               	retlw	109	;'m'
   246  001A  3400               	retlw	0
   247  001B                     STR_1:	
   248  001B  344C               	retlw	76	;'L'
   249  001C  3443               	retlw	67	;'C'
   250  001D  3444               	retlw	68	;'D'
   251  001E  3420               	retlw	32	;' '
   252  001F  344C               	retlw	76	;'L'
   253  0020  3469               	retlw	105	;'i'
   254  0021  3462               	retlw	98	;'b'
   255  0022  3472               	retlw	114	;'r'
   256  0023  3461               	retlw	97	;'a'
   257  0024  3472               	retlw	114	;'r'
   258  0025  3479               	retlw	121	;'y'
   259  0026  3420               	retlw	32	;' '
   260  0027  3466               	retlw	102	;'f'
   261  0028  346F               	retlw	111	;'o'
   262  0029  3472               	retlw	114	;'r'
   263  002A  3400               	retlw	0
   264  002B                     STR_3:	
   265  002B  3444               	retlw	68	;'D'
   266  002C  3465               	retlw	101	;'e'
   267  002D  3476               	retlw	118	;'v'
   268  002E  3465               	retlw	101	;'e'
   269  002F  346C               	retlw	108	;'l'
   270  0030  346F               	retlw	111	;'o'
   271  0031  3470               	retlw	112	;'p'
   272  0032  3465               	retlw	101	;'e'
   273  0033  3464               	retlw	100	;'d'
   274  0034  3420               	retlw	32	;' '
   275  0035  3442               	retlw	66	;'B'
   276  0036  3479               	retlw	121	;'y'
   277  0037  3400               	retlw	0
   278  0038                     STR_4:	
   279  0038  3465               	retlw	101	;'e'
   280  0039  346C               	retlw	108	;'l'
   281  003A  3465               	retlw	101	;'e'
   282  003B  3463               	retlw	99	;'c'
   283  003C  3474               	retlw	116	;'t'
   284  003D  3472               	retlw	114	;'r'
   285  003E  346F               	retlw	111	;'o'
   286  003F  3453               	retlw	83	;'S'
   287  0040  346F               	retlw	111	;'o'
   288  0041  346D               	retlw	109	;'m'
   289  0042  3465               	retlw	101	;'e'
   290  0043  3400               	retlw	0
   291  0044                     STR_2:	
   292  0044  344D               	retlw	77	;'M'
   293  0045  3450               	retlw	80	;'P'
   294  0046  344C               	retlw	76	;'L'
   295  0047  3441               	retlw	65	;'A'
   296  0048  3442               	retlw	66	;'B'
   297  0049  3420               	retlw	32	;' '
   298  004A  3458               	retlw	88	;'X'
   299  004B  3443               	retlw	67	;'C'
   300  004C  3438               	retlw	56	;'8'
   301  004D  3400               	retlw	0
   302                           
   303                           ; #config settings
   304  0000                     
   305                           	psect	cinit
   306  07FE                     start_initialization:	
   307  07FE                     __initialization:	
   308  07FE                     end_of_initialization:	
   309                           ;End of C runtime variable initialization code
   310                           
   311  07FE                     __end_of__initialization:	
   312  07FE  0183               	clrf	3
   313  07FF  2F67               	ljmp	_main	;jump to C main() function
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:	
   317  0070                     ?_Lcd_Port:	
   318  0070                     ??_Lcd_Port:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_Lcd_Cmd:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_LcdClear:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_Lcd_Init:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_Lcd_Write_Char:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_Lcd_Write_String:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_Lcd_Shift_Right:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_Lcd_Shift_Left:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?_main:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     Lcd_Port@a:	
   346                           ; 1 bytes @ 0x0
   347                           
   348                           
   349                           ; 1 bytes @ 0x0
   350  0070                     	ds	1
   351  0071                     ??_Lcd_Cmd:	
   352  0071                     ??_Lcd_Write_Char:	
   353                           ; 1 bytes @ 0x1
   354                           
   355                           
   356                           ; 1 bytes @ 0x1
   357  0071                     	ds	1
   358  0072                     Lcd_Write_Char@temp:	
   359                           
   360                           ; 1 bytes @ 0x2
   361  0072                     	ds	1
   362  0073                     Lcd_Cmd@a:	
   363  0073                     Lcd_Write_Char@y:	
   364                           ; 1 bytes @ 0x3
   365                           
   366                           
   367                           ; 1 bytes @ 0x3
   368  0073                     	ds	1
   369  0074                     ??_LcdClear:	
   370  0074                     ?_Lcd_Set_Cursor:	
   371                           ; 1 bytes @ 0x4
   372                           
   373  0074                     ??_Lcd_Init:	
   374                           ; 1 bytes @ 0x4
   375                           
   376  0074                     ??_Lcd_Shift_Right:	
   377                           ; 1 bytes @ 0x4
   378                           
   379  0074                     ??_Lcd_Shift_Left:	
   380                           ; 1 bytes @ 0x4
   381                           
   382  0074                     Lcd_Set_Cursor@b:	
   383                           ; 1 bytes @ 0x4
   384                           
   385  0074                     Lcd_Write_Char@a:	
   386                           ; 1 bytes @ 0x4
   387                           
   388                           
   389                           ; 1 bytes @ 0x4
   390  0074                     	ds	1
   391  0075                     ??_Lcd_Set_Cursor:	
   392  0075                     ??_Lcd_Write_String:	
   393                           ; 1 bytes @ 0x5
   394                           
   395  0075                     Lcd_Write_String@i:	
   396                           ; 1 bytes @ 0x5
   397                           
   398                           
   399                           ; 2 bytes @ 0x5
   400  0075                     	ds	2
   401  0077                     Lcd_Set_Cursor@a:	
   402  0077                     Lcd_Write_String@a:	
   403                           ; 1 bytes @ 0x7
   404                           
   405                           
   406                           ; 1 bytes @ 0x7
   407  0077                     	ds	1
   408  0078                     Lcd_Set_Cursor@z:	
   409                           
   410                           ; 1 bytes @ 0x8
   411  0078                     	ds	1
   412  0079                     Lcd_Set_Cursor@y:	
   413                           
   414                           ; 1 bytes @ 0x9
   415  0079                     	ds	1
   416  007A                     Lcd_Set_Cursor@temp:	
   417                           
   418                           ; 1 bytes @ 0xA
   419  007A                     	ds	1
   420  007B                     ??_main:	
   421                           
   422                           ; 1 bytes @ 0xB
   423  007B                     	ds	3
   424                           
   425                           	psect	cstackBANK0
   426  0020                     __pcstackBANK0:	
   427  0020                     main@a:	
   428                           
   429                           ; 2 bytes @ 0x0
   430  0020                     	ds	2
   431                           
   432                           	psect	maintext
   433  0767                     __pmaintext:	
   434 ;;
   435 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   436 ;;
   437 ;; *************** function _main *****************
   438 ;; Defined at:
   439 ;;		line 36 in file "main.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;  a               2    0[BANK0 ] unsigned int 
   444 ;; Return value:  Size  Location     Type
   445 ;;                  1    wreg      void 
   446 ;; Registers used:
   447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   448 ;; Tracked objects:
   449 ;;		On entry : B00/0
   450 ;;		On exit  : 0/0
   451 ;;		Unchanged: 0/0
   452 ;; Data sizes:     COMMON   BANK0   BANK1
   453 ;;      Params:         0       0       0
   454 ;;      Locals:         0       2       0
   455 ;;      Temps:          3       0       0
   456 ;;      Totals:         3       2       0
   457 ;;Total ram usage:        5 bytes
   458 ;; Hardware stack levels required when called:    3
   459 ;; This function calls:
   460 ;;		_LcdClear
   461 ;;		_Lcd_Init
   462 ;;		_Lcd_Set_Cursor
   463 ;;		_Lcd_Shift_Left
   464 ;;		_Lcd_Shift_Right
   465 ;;		_Lcd_Write_Char
   466 ;;		_Lcd_Write_String
   467 ;; This function is called by:
   468 ;;		Startup code after reset
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472                           
   473                           ;psect for function _main
   474  0767                     _main:	
   475                           
   476                           ;main.c: 39:     unsigned int a;;main.c: 42:     TRISEbits.PSPMODE=0x00;
   477                           
   478                           ;incstack = 0
   479                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   480  0767  1683               	bsf	3,5	;RP0=1, select bank1
   481  0768  1303               	bcf	3,6	;RP1=0, select bank1
   482  0769  1209               	bcf	9,4	;volatile
   483                           
   484                           ;main.c: 43:     TRISD=0x00;
   485  076A  0188               	clrf	8	;volatile
   486                           
   487                           ;main.c: 44:   Lcd_Init();
   488  076B  26F7               	fcall	_Lcd_Init
   489  076C                     l921:	
   490                           
   491                           ;main.c: 46:   {;main.c: 47:     LcdClear();
   492  076C  2671               	fcall	_LcdClear
   493                           
   494                           ;main.c: 48:     Lcd_Set_Cursor(1,1);
   495  076D  01F4               	clrf	Lcd_Set_Cursor@b
   496  076E  0AF4               	incf	Lcd_Set_Cursor@b,f
   497  076F  3001               	movlw	1
   498  0770  2729               	fcall	_Lcd_Set_Cursor
   499                           
   500                           ;main.c: 49:     Lcd_Write_String("LCD Library for");
   501  0771  3015               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   502  0772  2696               	fcall	_Lcd_Write_String
   503                           
   504                           ;main.c: 50:     Lcd_Set_Cursor(2,1);
   505  0773  01F4               	clrf	Lcd_Set_Cursor@b
   506  0774  0AF4               	incf	Lcd_Set_Cursor@b,f
   507  0775  3002               	movlw	2
   508  0776  2729               	fcall	_Lcd_Set_Cursor
   509                           
   510                           ;main.c: 51:     Lcd_Write_String("MPLAB XC8");
   511  0777  303E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   512  0778  2696               	fcall	_Lcd_Write_String
   513                           
   514                           ;main.c: 52:     _delay((unsigned long)((2000)*(20000000/4000.0)));
   515  0779  3033               	movlw	51
   516  077A  00FD               	movwf	??_main+2
   517  077B  30BB               	movlw	187
   518  077C  00FC               	movwf	??_main+1
   519  077D  30DF               	movlw	223
   520  077E  00FB               	movwf	??_main
   521  077F                     u257:	
   522  077F  0BFB               	decfsz	??_main,f
   523  0780  2F7F               	goto	u257
   524  0781  0BFC               	decfsz	??_main+1,f
   525  0782  2F7F               	goto	u257
   526  0783  0BFD               	decfsz	??_main+2,f
   527  0784  2F7F               	goto	u257
   528  0785  2F86               	nop2
   529                           
   530                           ;main.c: 53:     LcdClear();
   531  0786  2671               	fcall	_LcdClear
   532                           
   533                           ;main.c: 54:     Lcd_Set_Cursor(1,1);
   534  0787  01F4               	clrf	Lcd_Set_Cursor@b
   535  0788  0AF4               	incf	Lcd_Set_Cursor@b,f
   536  0789  3001               	movlw	1
   537  078A  2729               	fcall	_Lcd_Set_Cursor
   538                           
   539                           ;main.c: 55:     Lcd_Write_String("Developed By");
   540  078B  3025               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   541  078C  2696               	fcall	_Lcd_Write_String
   542                           
   543                           ;main.c: 56:     Lcd_Set_Cursor(2,1);
   544  078D  01F4               	clrf	Lcd_Set_Cursor@b
   545  078E  0AF4               	incf	Lcd_Set_Cursor@b,f
   546  078F  3002               	movlw	2
   547  0790  2729               	fcall	_Lcd_Set_Cursor
   548                           
   549                           ;main.c: 57:     Lcd_Write_String("electroSome");
   550  0791  3032               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   551  0792  2696               	fcall	_Lcd_Write_String
   552                           
   553                           ;main.c: 58:     _delay((unsigned long)((2000)*(20000000/4000.0)));
   554  0793  3033               	movlw	51
   555  0794  00FD               	movwf	??_main+2
   556  0795  30BB               	movlw	187
   557  0796  00FC               	movwf	??_main+1
   558  0797  30DF               	movlw	223
   559  0798  00FB               	movwf	??_main
   560  0799                     u267:	
   561  0799  0BFB               	decfsz	??_main,f
   562  079A  2F99               	goto	u267
   563  079B  0BFC               	decfsz	??_main+1,f
   564  079C  2F99               	goto	u267
   565  079D  0BFD               	decfsz	??_main+2,f
   566  079E  2F99               	goto	u267
   567  079F  2FA0               	nop2
   568                           
   569                           ;main.c: 59:     LcdClear();
   570  07A0  2671               	fcall	_LcdClear
   571                           
   572                           ;main.c: 60:     Lcd_Set_Cursor(1,1);
   573  07A1  01F4               	clrf	Lcd_Set_Cursor@b
   574  07A2  0AF4               	incf	Lcd_Set_Cursor@b,f
   575  07A3  3001               	movlw	1
   576  07A4  2729               	fcall	_Lcd_Set_Cursor
   577                           
   578                           ;main.c: 61:     Lcd_Write_String("www.electroSome.com");
   579  07A5  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   580  07A6  2696               	fcall	_Lcd_Write_String
   581                           
   582                           ;main.c: 63:     for(a=0;a<15;a++)
   583  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   584  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   585  07A9  01A0               	clrf	main@a
   586  07AA  01A1               	clrf	main@a+1
   587  07AB                     l957:	
   588                           
   589                           ;main.c: 64:     {;main.c: 65:         _delay((unsigned long)((300)*(20000000/4000.0)));
   590  07AB  3008               	movlw	8
   591  07AC  00FD               	movwf	??_main+2
   592  07AD  309D               	movlw	157
   593  07AE  00FC               	movwf	??_main+1
   594  07AF  3005               	movlw	5
   595  07B0  00FB               	movwf	??_main
   596  07B1                     u277:	
   597  07B1  0BFB               	decfsz	??_main,f
   598  07B2  2FB1               	goto	u277
   599  07B3  0BFC               	decfsz	??_main+1,f
   600  07B4  2FB1               	goto	u277
   601  07B5  0BFD               	decfsz	??_main+2,f
   602  07B6  2FB1               	goto	u277
   603  07B7  2FB8               	nop2
   604                           
   605                           ;main.c: 66:         Lcd_Shift_Left();
   606  07B8  2676               	fcall	_Lcd_Shift_Left
   607                           
   608                           ;main.c: 67:     }
   609  07B9  3001               	movlw	1
   610  07BA  1283               	bcf	3,5	;RP0=0, select bank0
   611  07BB  1303               	bcf	3,6	;RP1=0, select bank0
   612  07BC  07A0               	addwf	main@a,f
   613  07BD  1803               	skipnc
   614  07BE  0AA1               	incf	main@a+1,f
   615  07BF  3000               	movlw	0
   616  07C0  07A1               	addwf	main@a+1,f
   617  07C1  3000               	movlw	0
   618  07C2  0221               	subwf	main@a+1,w
   619  07C3  300F               	movlw	15
   620  07C4  1903               	skipnz
   621  07C5  0220               	subwf	main@a,w
   622  07C6  1C03               	skipc
   623  07C7  2FAB               	goto	l957
   624                           
   625                           ;main.c: 69:     for(a=0;a<15;a++)
   626  07C8  01A0               	clrf	main@a
   627  07C9  01A1               	clrf	main@a+1
   628  07CA                     l971:	
   629                           
   630                           ;main.c: 70:     {;main.c: 71:         _delay((unsigned long)((300)*(20000000/4000.0)));
   631  07CA  3008               	movlw	8
   632  07CB  00FD               	movwf	??_main+2
   633  07CC  309D               	movlw	157
   634  07CD  00FC               	movwf	??_main+1
   635  07CE  3005               	movlw	5
   636  07CF  00FB               	movwf	??_main
   637  07D0                     u287:	
   638  07D0  0BFB               	decfsz	??_main,f
   639  07D1  2FD0               	goto	u287
   640  07D2  0BFC               	decfsz	??_main+1,f
   641  07D3  2FD0               	goto	u287
   642  07D4  0BFD               	decfsz	??_main+2,f
   643  07D5  2FD0               	goto	u287
   644  07D6  2FD7               	nop2
   645                           
   646                           ;main.c: 72:         Lcd_Shift_Right();
   647  07D7  267B               	fcall	_Lcd_Shift_Right
   648                           
   649                           ;main.c: 73:     }
   650  07D8  3001               	movlw	1
   651  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   652  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   653  07DB  07A0               	addwf	main@a,f
   654  07DC  1803               	skipnc
   655  07DD  0AA1               	incf	main@a+1,f
   656  07DE  3000               	movlw	0
   657  07DF  07A1               	addwf	main@a+1,f
   658  07E0  3000               	movlw	0
   659  07E1  0221               	subwf	main@a+1,w
   660  07E2  300F               	movlw	15
   661  07E3  1903               	skipnz
   662  07E4  0220               	subwf	main@a,w
   663  07E5  1C03               	skipc
   664  07E6  2FCA               	goto	l971
   665                           
   666                           ;main.c: 75:     LcdClear();
   667  07E7  2671               	fcall	_LcdClear
   668                           
   669                           ;main.c: 76:     Lcd_Set_Cursor(2,1);
   670  07E8  01F4               	clrf	Lcd_Set_Cursor@b
   671  07E9  0AF4               	incf	Lcd_Set_Cursor@b,f
   672  07EA  3002               	movlw	2
   673  07EB  2729               	fcall	_Lcd_Set_Cursor
   674                           
   675                           ;main.c: 77:     Lcd_Write_Char('e');
   676  07EC  3065               	movlw	101
   677  07ED  26C6               	fcall	_Lcd_Write_Char
   678                           
   679                           ;main.c: 78:     Lcd_Write_Char('S');
   680  07EE  3053               	movlw	83
   681  07EF  26C6               	fcall	_Lcd_Write_Char
   682                           
   683                           ;main.c: 79:     _delay((unsigned long)((2000)*(20000000/4000.0)));
   684  07F0  3033               	movlw	51
   685  07F1  00FD               	movwf	??_main+2
   686  07F2  30BB               	movlw	187
   687  07F3  00FC               	movwf	??_main+1
   688  07F4  30DF               	movlw	223
   689  07F5  00FB               	movwf	??_main
   690  07F6                     u297:	
   691  07F6  0BFB               	decfsz	??_main,f
   692  07F7  2FF6               	goto	u297
   693  07F8  0BFC               	decfsz	??_main+1,f
   694  07F9  2FF6               	goto	u297
   695  07FA  0BFD               	decfsz	??_main+2,f
   696  07FB  2FF6               	goto	u297
   697  07FC  2FFD               	nop2
   698  07FD  2F6C               	goto	l921
   699  07FE                     __end_of_main:	
   700                           
   701                           	psect	text1
   702  0696                     __ptext1:	
   703 ;; *************** function _Lcd_Write_String *****************
   704 ;; Defined at:
   705 ;;		line 105 in file "lcdlib.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;  a               1    wreg     PTR unsigned char 
   708 ;;		 -> STR_5(20), STR_4(12), STR_3(13), STR_2(10), 
   709 ;;		 -> STR_1(16), 
   710 ;; Auto vars:     Size  Location     Type
   711 ;;  a               1    7[COMMON] PTR unsigned char 
   712 ;;		 -> STR_5(20), STR_4(12), STR_3(13), STR_2(10), 
   713 ;;		 -> STR_1(16), 
   714 ;;  i               2    5[COMMON] int 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  1    wreg      void 
   717 ;; Registers used:
   718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMMON   BANK0   BANK1
   724 ;;      Params:         0       0       0
   725 ;;      Locals:         3       0       0
   726 ;;      Temps:          0       0       0
   727 ;;      Totals:         3       0       0
   728 ;;Total ram usage:        3 bytes
   729 ;; Hardware stack levels used:    1
   730 ;; Hardware stack levels required when called:    2
   731 ;; This function calls:
   732 ;;		_Lcd_Write_Char
   733 ;; This function is called by:
   734 ;;		_main
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           
   739                           ;psect for function _Lcd_Write_String
   740  0696                     _Lcd_Write_String:	
   741                           
   742                           ;incstack = 0
   743                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   744                           ;Lcd_Write_String@a stored from wreg
   745  0696  00F7               	movwf	Lcd_Write_String@a
   746                           
   747                           ;lcdlib.c: 105: void Lcd_Write_String(char *a);lcdlib.c: 106: {;lcdlib.c: 107:  int i;;l
      +                          cdlib.c: 108:  for(i=0;a[i]!='\0';i++)
   748  0697  01F5               	clrf	Lcd_Write_String@i
   749  0698  01F6               	clrf	Lcd_Write_String@i+1
   750  0699                     l909:	
   751  0699  0875               	movf	Lcd_Write_String@i,w
   752  069A  0777               	addwf	Lcd_Write_String@a,w
   753  069B  0084               	movwf	4
   754  069C  2001               	fcall	stringdir
   755  069D  3A00               	xorlw	0
   756  069E  1903               	btfsc	3,2
   757  069F  0008               	return
   758                           
   759                           ;lcdlib.c: 109:     Lcd_Write_Char(a[i]);
   760  06A0  0875               	movf	Lcd_Write_String@i,w
   761  06A1  0777               	addwf	Lcd_Write_String@a,w
   762  06A2  0084               	movwf	4
   763  06A3  2001               	fcall	stringdir
   764  06A4  26C6               	fcall	_Lcd_Write_Char
   765  06A5  3001               	movlw	1
   766  06A6  07F5               	addwf	Lcd_Write_String@i,f
   767  06A7  1803               	skipnc
   768  06A8  0AF6               	incf	Lcd_Write_String@i+1,f
   769  06A9  3000               	movlw	0
   770  06AA  07F6               	addwf	Lcd_Write_String@i+1,f
   771  06AB  2E99               	goto	l909
   772  06AC                     __end_of_Lcd_Write_String:	
   773                           
   774                           	psect	text2
   775  06C6                     __ptext2:	
   776 ;; *************** function _Lcd_Write_Char *****************
   777 ;; Defined at:
   778 ;;		line 89 in file "lcdlib.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;  a               1    wreg     unsigned char 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  a               1    4[COMMON] unsigned char 
   783 ;;  y               1    3[COMMON] unsigned char 
   784 ;;  temp            1    2[COMMON] unsigned char 
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, status,2, status,0, pclath, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1
   794 ;;      Params:         0       0       0
   795 ;;      Locals:         3       0       0
   796 ;;      Temps:          1       0       0
   797 ;;      Totals:         4       0       0
   798 ;;Total ram usage:        4 bytes
   799 ;; Hardware stack levels used:    1
   800 ;; Hardware stack levels required when called:    1
   801 ;; This function calls:
   802 ;;		_Lcd_Port
   803 ;; This function is called by:
   804 ;;		_Lcd_Write_String
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           
   810                           ;psect for function _Lcd_Write_Char
   811  06C6                     _Lcd_Write_Char:	
   812                           
   813                           ;incstack = 0
   814                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   815                           ;Lcd_Write_Char@a stored from wreg
   816  06C6  00F4               	movwf	Lcd_Write_Char@a
   817                           
   818                           ;lcdlib.c: 89: void Lcd_Write_Char(char a);lcdlib.c: 90: {;lcdlib.c: 91:    char temp,y;
      +                          ;lcdlib.c: 92:    temp = a&0x0F;
   819  06C7  0874               	movf	Lcd_Write_Char@a,w
   820  06C8  390F               	andlw	15
   821  06C9  00F1               	movwf	??_Lcd_Write_Char
   822  06CA  0871               	movf	??_Lcd_Write_Char,w
   823  06CB  00F2               	movwf	Lcd_Write_Char@temp
   824                           
   825                           ;lcdlib.c: 93:    y = a&0xF0;
   826  06CC  0874               	movf	Lcd_Write_Char@a,w
   827  06CD  39F0               	andlw	240
   828  06CE  00F1               	movwf	??_Lcd_Write_Char
   829  06CF  0871               	movf	??_Lcd_Write_Char,w
   830  06D0  00F3               	movwf	Lcd_Write_Char@y
   831                           
   832                           ;lcdlib.c: 94:    RD0 = 1;
   833  06D1  1283               	bcf	3,5	;RP0=0, select bank0
   834  06D2  1303               	bcf	3,6	;RP1=0, select bank0
   835  06D3  1408               	bsf	8,0	;volatile
   836                           
   837                           ;lcdlib.c: 95:    Lcd_Port(y>>4);
   838  06D4  0873               	movf	Lcd_Write_Char@y,w
   839  06D5  00F1               	movwf	??_Lcd_Write_Char
   840  06D6  3004               	movlw	4
   841  06D7                     u175:	
   842  06D7  1003               	clrc
   843  06D8  0CF1               	rrf	??_Lcd_Write_Char,f
   844  06D9  3EFF               	addlw	-1
   845  06DA  1D03               	skipz
   846  06DB  2ED7               	goto	u175
   847  06DC  0871               	movf	??_Lcd_Write_Char,w
   848  06DD  26AC               	fcall	_Lcd_Port
   849                           
   850                           ;lcdlib.c: 96:    RD1 = 1;
   851  06DE  1283               	bcf	3,5	;RP0=0, select bank0
   852  06DF  1303               	bcf	3,6	;RP1=0, select bank0
   853  06E0  1488               	bsf	8,1	;volatile
   854                           
   855                           ;lcdlib.c: 97:    _delay((unsigned long)((40)*(20000000/4000000.0)));
   856  06E1  3042               	movlw	66
   857  06E2  00F1               	movwf	??_Lcd_Write_Char
   858  06E3                     u307:	
   859  06E3  0BF1               	decfsz	??_Lcd_Write_Char,f
   860  06E4  2EE3               	goto	u307
   861  06E5  0000               	nop
   862                           
   863                           ;lcdlib.c: 98:    RD1 = 0;
   864  06E6  1283               	bcf	3,5	;RP0=0, select bank0
   865  06E7  1303               	bcf	3,6	;RP1=0, select bank0
   866  06E8  1088               	bcf	8,1	;volatile
   867                           
   868                           ;lcdlib.c: 99:    Lcd_Port(temp);
   869  06E9  0872               	movf	Lcd_Write_Char@temp,w
   870  06EA  26AC               	fcall	_Lcd_Port
   871                           
   872                           ;lcdlib.c: 100:    RD1 = 1;
   873  06EB  1283               	bcf	3,5	;RP0=0, select bank0
   874  06EC  1303               	bcf	3,6	;RP1=0, select bank0
   875  06ED  1488               	bsf	8,1	;volatile
   876                           
   877                           ;lcdlib.c: 101:    _delay((unsigned long)((40)*(20000000/4000000.0)));
   878  06EE  3042               	movlw	66
   879  06EF  00F1               	movwf	??_Lcd_Write_Char
   880  06F0                     u317:	
   881  06F0  0BF1               	decfsz	??_Lcd_Write_Char,f
   882  06F1  2EF0               	goto	u317
   883  06F2  0000               	nop
   884                           
   885                           ;lcdlib.c: 102:    RD1 = 0;
   886  06F3  1283               	bcf	3,5	;RP0=0, select bank0
   887  06F4  1303               	bcf	3,6	;RP1=0, select bank0
   888  06F5  1088               	bcf	8,1	;volatile
   889  06F6  0008               	return
   890  06F7                     __end_of_Lcd_Write_Char:	
   891                           
   892                           	psect	text3
   893  067B                     __ptext3:	
   894 ;; *************** function _Lcd_Shift_Right *****************
   895 ;; Defined at:
   896 ;;		line 112 in file "lcdlib.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, status,2, status,0, pclath, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMMON   BANK0   BANK1
   910 ;;      Params:         0       0       0
   911 ;;      Locals:         0       0       0
   912 ;;      Temps:          0       0       0
   913 ;;      Totals:         0       0       0
   914 ;;Total ram usage:        0 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; Hardware stack levels required when called:    2
   917 ;; This function calls:
   918 ;;		_Lcd_Cmd
   919 ;; This function is called by:
   920 ;;		_main
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           
   925                           ;psect for function _Lcd_Shift_Right
   926  067B                     _Lcd_Shift_Right:	
   927                           
   928                           ;lcdlib.c: 114:  Lcd_Cmd(0x01);
   929                           
   930                           ;incstack = 0
   931                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   932  067B  3001               	movlw	1
   933  067C  2680               	fcall	_Lcd_Cmd
   934                           
   935                           ;lcdlib.c: 115:  Lcd_Cmd(0x0C);
   936  067D  300C               	movlw	12
   937  067E  2680               	fcall	_Lcd_Cmd
   938  067F  0008               	return
   939  0680                     __end_of_Lcd_Shift_Right:	
   940                           
   941                           	psect	text4
   942  0676                     __ptext4:	
   943 ;; *************** function _Lcd_Shift_Left *****************
   944 ;; Defined at:
   945 ;;		line 118 in file "lcdlib.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;		None
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, status,2, status,0, pclath, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMMON   BANK0   BANK1
   959 ;;      Params:         0       0       0
   960 ;;      Locals:         0       0       0
   961 ;;      Temps:          0       0       0
   962 ;;      Totals:         0       0       0
   963 ;;Total ram usage:        0 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; Hardware stack levels required when called:    2
   966 ;; This function calls:
   967 ;;		_Lcd_Cmd
   968 ;; This function is called by:
   969 ;;		_main
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           
   974                           ;psect for function _Lcd_Shift_Left
   975  0676                     _Lcd_Shift_Left:	
   976                           
   977                           ;lcdlib.c: 120:  Lcd_Cmd(0x01);
   978                           
   979                           ;incstack = 0
   980                           ; Regs used in _Lcd_Shift_Left: [wreg+status,2+status,0+pclath+cstack]
   981  0676  3001               	movlw	1
   982  0677  2680               	fcall	_Lcd_Cmd
   983                           
   984                           ;lcdlib.c: 121:  Lcd_Cmd(0x08);
   985  0678  3008               	movlw	8
   986  0679  2680               	fcall	_Lcd_Cmd
   987  067A  0008               	return
   988  067B                     __end_of_Lcd_Shift_Left:	
   989                           
   990                           	psect	text5
   991  0729                     __ptext5:	
   992 ;; *************** function _Lcd_Set_Cursor *****************
   993 ;; Defined at:
   994 ;;		line 49 in file "lcdlib.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  a               1    wreg     unsigned char 
   997 ;;  b               1    4[COMMON] unsigned char 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  a               1    7[COMMON] unsigned char 
  1000 ;;  temp            1   10[COMMON] unsigned char 
  1001 ;;  y               1    9[COMMON] unsigned char 
  1002 ;;  z               1    8[COMMON] unsigned char 
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      void 
  1005 ;; Registers used:
  1006 ;;		wreg, status,2, status,0, pclath, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMMON   BANK0   BANK1
  1012 ;;      Params:         1       0       0
  1013 ;;      Locals:         4       0       0
  1014 ;;      Temps:          2       0       0
  1015 ;;      Totals:         7       0       0
  1016 ;;Total ram usage:        7 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    2
  1019 ;; This function calls:
  1020 ;;		_Lcd_Cmd
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           
  1027                           ;psect for function _Lcd_Set_Cursor
  1028  0729                     _Lcd_Set_Cursor:	
  1029                           
  1030                           ;incstack = 0
  1031                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1032                           ;Lcd_Set_Cursor@a stored from wreg
  1033  0729  00F7               	movwf	Lcd_Set_Cursor@a
  1034                           
  1035                           ;lcdlib.c: 49: void Lcd_Set_Cursor(char a, char b);lcdlib.c: 50: {;lcdlib.c: 51:  char t
      +                          emp,z,y;;lcdlib.c: 52:  if(a == 1)
  1036  072A  0377               	decf	Lcd_Set_Cursor@a,w
  1037  072B  1D03               	btfss	3,2
  1038  072C  2F48               	goto	l883
  1039                           
  1040                           ;lcdlib.c: 53:  {;lcdlib.c: 54:    temp = 0x80 + b - 1;
  1041  072D  0874               	movf	Lcd_Set_Cursor@b,w
  1042  072E  3E7F               	addlw	127
  1043  072F  00F5               	movwf	??_Lcd_Set_Cursor
  1044  0730  0875               	movf	??_Lcd_Set_Cursor,w
  1045  0731  00FA               	movwf	Lcd_Set_Cursor@temp
  1046                           
  1047                           ;lcdlib.c: 55:   z = temp>>4;
  1048  0732  087A               	movf	Lcd_Set_Cursor@temp,w
  1049  0733  00F5               	movwf	??_Lcd_Set_Cursor
  1050  0734  3004               	movlw	4
  1051  0735                     u195:	
  1052  0735  1003               	clrc
  1053  0736  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1054  0737  3EFF               	addlw	-1
  1055  0738  1D03               	skipz
  1056  0739  2F35               	goto	u195
  1057  073A  0875               	movf	??_Lcd_Set_Cursor,w
  1058  073B  00F6               	movwf	??_Lcd_Set_Cursor+1
  1059  073C  0876               	movf	??_Lcd_Set_Cursor+1,w
  1060  073D  00F8               	movwf	Lcd_Set_Cursor@z
  1061                           
  1062                           ;lcdlib.c: 56:   y = temp & 0x0F;
  1063  073E  087A               	movf	Lcd_Set_Cursor@temp,w
  1064  073F  390F               	andlw	15
  1065  0740  00F5               	movwf	??_Lcd_Set_Cursor
  1066  0741  0875               	movf	??_Lcd_Set_Cursor,w
  1067  0742  00F9               	movwf	Lcd_Set_Cursor@y
  1068                           
  1069                           ;lcdlib.c: 57:   Lcd_Cmd(z);
  1070  0743  0878               	movf	Lcd_Set_Cursor@z,w
  1071  0744  2680               	fcall	_Lcd_Cmd
  1072                           
  1073                           ;lcdlib.c: 58:   Lcd_Cmd(y);
  1074  0745  0879               	movf	Lcd_Set_Cursor@y,w
  1075  0746  2680               	fcall	_Lcd_Cmd
  1076                           
  1077                           ;lcdlib.c: 59:  }
  1078  0747  0008               	return
  1079  0748                     l883:	
  1080  0748  3002               	movlw	2
  1081  0749  0677               	xorwf	Lcd_Set_Cursor@a,w
  1082  074A  1D03               	btfss	3,2
  1083  074B  0008               	return
  1084                           
  1085                           ;lcdlib.c: 61:  {;lcdlib.c: 62:   temp = 0xC0 + b - 1;
  1086  074C  0874               	movf	Lcd_Set_Cursor@b,w
  1087  074D  3EBF               	addlw	191
  1088  074E  00F5               	movwf	??_Lcd_Set_Cursor
  1089  074F  0875               	movf	??_Lcd_Set_Cursor,w
  1090  0750  00FA               	movwf	Lcd_Set_Cursor@temp
  1091                           
  1092                           ;lcdlib.c: 63:   z = temp>>4;
  1093  0751  087A               	movf	Lcd_Set_Cursor@temp,w
  1094  0752  00F5               	movwf	??_Lcd_Set_Cursor
  1095  0753  3004               	movlw	4
  1096  0754                     u215:	
  1097  0754  1003               	clrc
  1098  0755  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1099  0756  3EFF               	addlw	-1
  1100  0757  1D03               	skipz
  1101  0758  2F54               	goto	u215
  1102  0759  0875               	movf	??_Lcd_Set_Cursor,w
  1103  075A  00F6               	movwf	??_Lcd_Set_Cursor+1
  1104  075B  0876               	movf	??_Lcd_Set_Cursor+1,w
  1105  075C  00F8               	movwf	Lcd_Set_Cursor@z
  1106                           
  1107                           ;lcdlib.c: 64:   y = temp & 0x0F;
  1108  075D  087A               	movf	Lcd_Set_Cursor@temp,w
  1109  075E  390F               	andlw	15
  1110  075F  00F5               	movwf	??_Lcd_Set_Cursor
  1111  0760  0875               	movf	??_Lcd_Set_Cursor,w
  1112  0761  00F9               	movwf	Lcd_Set_Cursor@y
  1113                           
  1114                           ;lcdlib.c: 65:   Lcd_Cmd(z);
  1115  0762  0878               	movf	Lcd_Set_Cursor@z,w
  1116  0763  2680               	fcall	_Lcd_Cmd
  1117                           
  1118                           ;lcdlib.c: 66:   Lcd_Cmd(y);
  1119  0764  0879               	movf	Lcd_Set_Cursor@y,w
  1120  0765  2680               	fcall	_Lcd_Cmd
  1121  0766  0008               	return
  1122  0767                     __end_of_Lcd_Set_Cursor:	
  1123                           
  1124                           	psect	text6
  1125  06F7                     __ptext6:	
  1126 ;; *************** function _Lcd_Init *****************
  1127 ;; Defined at:
  1128 ;;		line 70 in file "lcdlib.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      void 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, pclath, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMMON   BANK0   BANK1
  1142 ;;      Params:         0       0       0
  1143 ;;      Locals:         0       0       0
  1144 ;;      Temps:          2       0       0
  1145 ;;      Totals:         2       0       0
  1146 ;;Total ram usage:        2 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    2
  1149 ;; This function calls:
  1150 ;;		_Lcd_Cmd
  1151 ;;		_Lcd_Port
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           
  1158                           ;psect for function _Lcd_Init
  1159  06F7                     _Lcd_Init:	
  1160                           
  1161                           ;lcdlib.c: 72:   Lcd_Port(0x00);
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1165  06F7  3000               	movlw	0
  1166  06F8  26AC               	fcall	_Lcd_Port
  1167                           
  1168                           ;lcdlib.c: 73:    _delay((unsigned long)((20)*(20000000/4000.0)));
  1169  06F9  3082               	movlw	130
  1170  06FA  00F5               	movwf	??_Lcd_Init+1
  1171  06FB  30DD               	movlw	221
  1172  06FC  00F4               	movwf	??_Lcd_Init
  1173  06FD                     u327:	
  1174  06FD  0BF4               	decfsz	??_Lcd_Init,f
  1175  06FE  2EFD               	goto	u327
  1176  06FF  0BF5               	decfsz	??_Lcd_Init+1,f
  1177  0700  2EFD               	goto	u327
  1178  0701  2F02               	nop2
  1179                           
  1180                           ;lcdlib.c: 74:   Lcd_Cmd(0x03);
  1181  0702  3003               	movlw	3
  1182  0703  2680               	fcall	_Lcd_Cmd
  1183                           
  1184                           ;lcdlib.c: 75:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1185  0704  3021               	movlw	33
  1186  0705  00F5               	movwf	??_Lcd_Init+1
  1187  0706  3076               	movlw	118
  1188  0707  00F4               	movwf	??_Lcd_Init
  1189  0708                     u337:	
  1190  0708  0BF4               	decfsz	??_Lcd_Init,f
  1191  0709  2F08               	goto	u337
  1192  070A  0BF5               	decfsz	??_Lcd_Init+1,f
  1193  070B  2F08               	goto	u337
  1194  070C  0000               	nop
  1195                           
  1196                           ;lcdlib.c: 76:   Lcd_Cmd(0x03);
  1197  070D  3003               	movlw	3
  1198  070E  2680               	fcall	_Lcd_Cmd
  1199                           
  1200                           ;lcdlib.c: 77:  _delay((unsigned long)((11)*(20000000/4000.0)));
  1201  070F  3048               	movlw	72
  1202  0710  00F5               	movwf	??_Lcd_Init+1
  1203  0711  306C               	movlw	108
  1204  0712  00F4               	movwf	??_Lcd_Init
  1205  0713                     u347:	
  1206  0713  0BF4               	decfsz	??_Lcd_Init,f
  1207  0714  2F13               	goto	u347
  1208  0715  0BF5               	decfsz	??_Lcd_Init+1,f
  1209  0716  2F13               	goto	u347
  1210  0717  0000               	nop
  1211                           
  1212                           ;lcdlib.c: 78:   Lcd_Cmd(0x03);
  1213  0718  3003               	movlw	3
  1214  0719  2680               	fcall	_Lcd_Cmd
  1215                           
  1216                           ;lcdlib.c: 80:   Lcd_Cmd(0x02);
  1217  071A  3002               	movlw	2
  1218  071B  2680               	fcall	_Lcd_Cmd
  1219                           
  1220                           ;lcdlib.c: 81:   Lcd_Cmd(0x02);
  1221  071C  3002               	movlw	2
  1222  071D  2680               	fcall	_Lcd_Cmd
  1223                           
  1224                           ;lcdlib.c: 82:   Lcd_Cmd(0x08);
  1225  071E  3008               	movlw	8
  1226  071F  2680               	fcall	_Lcd_Cmd
  1227                           
  1228                           ;lcdlib.c: 83:   Lcd_Cmd(0x00);
  1229  0720  3000               	movlw	0
  1230  0721  2680               	fcall	_Lcd_Cmd
  1231                           
  1232                           ;lcdlib.c: 84:   Lcd_Cmd(0x0C);
  1233  0722  300C               	movlw	12
  1234  0723  2680               	fcall	_Lcd_Cmd
  1235                           
  1236                           ;lcdlib.c: 85:   Lcd_Cmd(0x00);
  1237  0724  3000               	movlw	0
  1238  0725  2680               	fcall	_Lcd_Cmd
  1239                           
  1240                           ;lcdlib.c: 86:   Lcd_Cmd(0x06);
  1241  0726  3006               	movlw	6
  1242  0727  2680               	fcall	_Lcd_Cmd
  1243  0728  0008               	return
  1244  0729                     __end_of_Lcd_Init:	
  1245                           
  1246                           	psect	text7
  1247  0671                     __ptext7:	
  1248 ;; *************** function _LcdClear *****************
  1249 ;; Defined at:
  1250 ;;		line 43 in file "lcdlib.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;		None
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, status,2, status,0, pclath, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMMON   BANK0   BANK1
  1264 ;;      Params:         0       0       0
  1265 ;;      Locals:         0       0       0
  1266 ;;      Temps:          0       0       0
  1267 ;;      Totals:         0       0       0
  1268 ;;Total ram usage:        0 bytes
  1269 ;; Hardware stack levels used:    1
  1270 ;; Hardware stack levels required when called:    2
  1271 ;; This function calls:
  1272 ;;		_Lcd_Cmd
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _LcdClear
  1280  0671                     _LcdClear:	
  1281                           
  1282                           ;lcdlib.c: 45:  Lcd_Cmd(0);
  1283                           
  1284                           ;incstack = 0
  1285                           ; Regs used in _LcdClear: [wreg+status,2+status,0+pclath+cstack]
  1286  0671  3000               	movlw	0
  1287  0672  2680               	fcall	_Lcd_Cmd
  1288                           
  1289                           ;lcdlib.c: 46:  Lcd_Cmd(1);
  1290  0673  3001               	movlw	1
  1291  0674  2680               	fcall	_Lcd_Cmd
  1292  0675  0008               	return
  1293  0676                     __end_of_LcdClear:	
  1294                           
  1295                           	psect	text8
  1296  0680                     __ptext8:	
  1297 ;; *************** function _Lcd_Cmd *****************
  1298 ;; Defined at:
  1299 ;;		line 34 in file "lcdlib.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  a               1    wreg     unsigned char 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  a               1    3[COMMON] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0, pclath, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1
  1313 ;;      Params:         0       0       0
  1314 ;;      Locals:         1       0       0
  1315 ;;      Temps:          2       0       0
  1316 ;;      Totals:         3       0       0
  1317 ;;Total ram usage:        3 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    1
  1320 ;; This function calls:
  1321 ;;		_Lcd_Port
  1322 ;; This function is called by:
  1323 ;;		_LcdClear
  1324 ;;		_Lcd_Set_Cursor
  1325 ;;		_Lcd_Init
  1326 ;;		_Lcd_Shift_Right
  1327 ;;		_Lcd_Shift_Left
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           
  1332                           ;psect for function _Lcd_Cmd
  1333  0680                     _Lcd_Cmd:	
  1334                           
  1335                           ;incstack = 0
  1336                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1337                           ;Lcd_Cmd@a stored from wreg
  1338  0680  00F3               	movwf	Lcd_Cmd@a
  1339                           
  1340                           ;lcdlib.c: 34: void Lcd_Cmd(char a);lcdlib.c: 35: {;lcdlib.c: 36:  RD0 = 0;
  1341  0681  1283               	bcf	3,5	;RP0=0, select bank0
  1342  0682  1303               	bcf	3,6	;RP1=0, select bank0
  1343  0683  1008               	bcf	8,0	;volatile
  1344                           
  1345                           ;lcdlib.c: 37:  Lcd_Port(a);
  1346  0684  0873               	movf	Lcd_Cmd@a,w
  1347  0685  26AC               	fcall	_Lcd_Port
  1348                           
  1349                           ;lcdlib.c: 38:  RD1 = 1;
  1350  0686  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0687  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0688  1488               	bsf	8,1	;volatile
  1353                           
  1354                           ;lcdlib.c: 39:         _delay((unsigned long)((4)*(20000000/4000.0)));
  1355  0689  301A               	movlw	26
  1356  068A  00F2               	movwf	??_Lcd_Cmd+1
  1357  068B  30F8               	movlw	248
  1358  068C  00F1               	movwf	??_Lcd_Cmd
  1359  068D                     u357:	
  1360  068D  0BF1               	decfsz	??_Lcd_Cmd,f
  1361  068E  2E8D               	goto	u357
  1362  068F  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1363  0690  2E8D               	goto	u357
  1364  0691  0000               	nop
  1365                           
  1366                           ;lcdlib.c: 40:         RD1 = 0;
  1367  0692  1283               	bcf	3,5	;RP0=0, select bank0
  1368  0693  1303               	bcf	3,6	;RP1=0, select bank0
  1369  0694  1088               	bcf	8,1	;volatile
  1370  0695  0008               	return
  1371  0696                     __end_of_Lcd_Cmd:	
  1372                           
  1373                           	psect	text9
  1374  06AC                     __ptext9:	
  1375 ;; *************** function _Lcd_Port *****************
  1376 ;; Defined at:
  1377 ;;		line 12 in file "lcdlib.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;  a               1    wreg     unsigned char 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  a               1    0[COMMON] unsigned char 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  1    wreg      void 
  1384 ;; Registers used:
  1385 ;;		wreg
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMMON   BANK0   BANK1
  1391 ;;      Params:         0       0       0
  1392 ;;      Locals:         1       0       0
  1393 ;;      Temps:          0       0       0
  1394 ;;      Totals:         1       0       0
  1395 ;;Total ram usage:        1 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_Lcd_Cmd
  1401 ;;		_Lcd_Init
  1402 ;;		_Lcd_Write_Char
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           
  1407                           ;psect for function _Lcd_Port
  1408  06AC                     _Lcd_Port:	
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in _Lcd_Port: [wreg]
  1412                           ;Lcd_Port@a stored from wreg
  1413  06AC  00F0               	movwf	Lcd_Port@a
  1414                           
  1415                           ;lcdlib.c: 12: void Lcd_Port(char a);lcdlib.c: 13: {;lcdlib.c: 14:  if(a & 1)
  1416  06AD  1C70               	btfss	Lcd_Port@a,0
  1417  06AE  2EB3               	goto	l17
  1418                           
  1419                           ;lcdlib.c: 15:   RD2 = 1;
  1420  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  1421  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  1422  06B1  1508               	bsf	8,2	;volatile
  1423  06B2  2EB6               	goto	l18
  1424  06B3                     l17:	
  1425                           ;lcdlib.c: 16:  else
  1426                           
  1427                           
  1428                           ;lcdlib.c: 17:   RD2 = 0;
  1429  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1430  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1431  06B5  1108               	bcf	8,2	;volatile
  1432  06B6                     l18:	
  1433                           
  1434                           ;lcdlib.c: 19:  if(a & 2)
  1435  06B6  1CF0               	btfss	Lcd_Port@a,1
  1436  06B7  2EBA               	goto	l19
  1437                           
  1438                           ;lcdlib.c: 20:   RD3 = 1;
  1439  06B8  1588               	bsf	8,3	;volatile
  1440  06B9  2EBB               	goto	l20
  1441  06BA                     l19:	
  1442                           ;lcdlib.c: 21:  else
  1443                           
  1444                           
  1445                           ;lcdlib.c: 22:   RD3 = 0;
  1446  06BA  1188               	bcf	8,3	;volatile
  1447  06BB                     l20:	
  1448                           
  1449                           ;lcdlib.c: 24:  if(a & 4)
  1450  06BB  1D70               	btfss	Lcd_Port@a,2
  1451  06BC  2EBF               	goto	l21
  1452                           
  1453                           ;lcdlib.c: 25:   RD4 = 1;
  1454  06BD  1608               	bsf	8,4	;volatile
  1455  06BE  2EC0               	goto	l22
  1456  06BF                     l21:	
  1457                           ;lcdlib.c: 26:  else
  1458                           
  1459                           
  1460                           ;lcdlib.c: 27:   RD4 = 0;
  1461  06BF  1208               	bcf	8,4	;volatile
  1462  06C0                     l22:	
  1463                           
  1464                           ;lcdlib.c: 29:  if(a & 8)
  1465  06C0  1DF0               	btfss	Lcd_Port@a,3
  1466  06C1  2EC4               	goto	l23
  1467                           
  1468                           ;lcdlib.c: 30:   RD5 = 1;
  1469  06C2  1688               	bsf	8,5	;volatile
  1470  06C3  0008               	return
  1471  06C4                     l23:	
  1472                           ;lcdlib.c: 31:  else
  1473                           
  1474                           
  1475                           ;lcdlib.c: 32:   RD5 = 0;
  1476  06C4  1288               	bcf	8,5	;volatile
  1477  06C5  0008               	return
  1478  06C6                     __end_of_Lcd_Port:	
  1479  007E                     btemp	set	126	;btemp
  1480  007E                     wtemp0	set	126


Data Sizes:
    Strings     71
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      2       2
    BANK1            32      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 20
		 -> STR_5(CODE[20]), STR_4(CODE[12]), STR_3(CODE[13]), STR_2(CODE[10]), 
		 -> STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Shift_Left->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _LcdClear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2067
                                             11 COMMON     3     3      0
                                              0 BANK0      2     2      0
                           _LcdClear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Shift_Left
                    _Lcd_Shift_Right
                     _Lcd_Write_Char
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     433
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Left                                       0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     836
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _LcdClear                                             0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LcdClear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Left
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       2       5        2.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            20      0       0       6        0.0%
BANK1               20      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jul 28 03:53:52 2019

                        pc 0002                __CFG_CP$OFF 0000                         l20 06BB  
                       l21 06BF                         l22 06C0                         l23 06C4  
                       l17 06B3                         l18 06B6                         l19 06BA  
                       fsr 0004                __CFG_LVP$ON 0000                        l921 076C  
                      l909 0699                        l883 0748                        l971 07CA  
                      l957 07AB                        _RD0 0040                        _RD1 0041  
                      _RD2 0042                        _RD3 0043                        _RD4 0044  
                      _RD5 0045                        u215 0754                        u307 06E3  
                      u317 06F0                        u327 06FD                        u175 06D7  
                      u337 0708                        u257 077F               __CFG_CPD$OFF 0000  
                      u347 0713                        u195 0735                        u267 0799  
                      u357 068D                        u277 07B1                        u287 07D0  
                      u297 07F6                        fsr0 0004                       STR_1 001B  
                     STR_2 0044                       STR_3 002B                       STR_4 0038  
                     STR_5 0007               __CFG_WRT$ALL 0000          ?_Lcd_Write_String 0070  
                     _main 0767                       btemp 007E              __CFG_BOREN$ON 0000  
                     start 0000         ??_Lcd_Write_String 0075            __end_of_Lcd_Cmd 0696  
                    ?_main 0070              __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 003E  
                    _TRISD 0088    __size_of_Lcd_Shift_Left 0005                      main@a 0020  
                    pclath 000A                      status 0003                      wtemp0 007E  
         __end_of_LcdClear 0676           __end_of_Lcd_Init 0729           __end_of_Lcd_Port 06C6  
          __initialization 07FE               __end_of_main 07FE                     ??_main 007B  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0031             __CFG_PWRTE$OFF 0000  
 __size_of_Lcd_Shift_Right 0005            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078            __CFG_FOSC$EXTRC 0000  
  __end_of__initialization 07FE             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0729  
                ?_LcdClear 0070             _Lcd_Shift_Left 0676                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                 __pmaintext 0767  __size_of_Lcd_Write_String 0016  
   __end_of_Lcd_Set_Cursor 0767     __end_of_Lcd_Shift_Left 067B          ??_Lcd_Shift_Right 0074  
               ??_LcdClear 0074                 ??_Lcd_Init 0074                 ??_Lcd_Port 0070  
               __stringtab 0001             _Lcd_Write_Char 06C6                    _Lcd_Cmd 0680  
          ?_Lcd_Set_Cursor 0074                    __ptext1 0696                    __ptext2 06C6  
                  __ptext3 067B                    __ptext4 0676                    __ptext5 0729  
                  __ptext6 06F7                    __ptext7 0671                    __ptext8 0680  
                  __ptext9 06AC            ?_Lcd_Shift_Left 0070     __end_of_Lcd_Write_Char 06F7  
     end_of_initialization 07FE                  Lcd_Port@a 0070                  _TRISEbits 0089  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
         _Lcd_Write_String 0696        start_initialization 07FE          __size_of_LcdClear 0005  
        __size_of_Lcd_Init 0032          __size_of_Lcd_Port 001A            _Lcd_Shift_Right 067B  
          Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073                  ___latbits 0000  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075  
         ??_Lcd_Shift_Left 0074                  __pstrings 0001    __end_of_Lcd_Shift_Right 0680  
                 Lcd_Cmd@a 0073                __stringbase 0006           ??_Lcd_Write_Char 0071  
                 _LcdClear 0671                   _Lcd_Init 06F7                   _Lcd_Port 06AC  
 __end_of_Lcd_Write_String 06AC           __size_of_Lcd_Cmd 0016         __end_of__stringtab 0007  
            __size_of_main 0097           ?_Lcd_Shift_Right 0070         Lcd_Write_Char@temp 0072  
                stringcode 0001         Lcd_Set_Cursor@temp 007A                   stringdir 0001  
                 stringtab 0001  
